version: '3.8'

x-logging: &local-logging
  driver: 'local'
  options:
    max-size: '20m'
    max-file: '50'
x-loki-logging: &loki-logging
  driver: 'loki'
  options:
    max-size: '20m'
    max-file: '50'
    loki-url: '${LOKI_URL}'
    loki-external-labels: 'container_name={{.Name}},hostname=${LOKI_REPORTING_NAME}'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}[T ]?\d{2}:\d{2}:\d{2}.\d{3}'

x-healthcheck: &healthcheck
  test: /healthcheck.sh
  interval: 60s
  retries: 5
  start_period: 20s
  timeout: 10s

x-security: &security
  security_opt:
    - 'no-new-privileges=true'
  cap_drop:
    - ALL
  read_only: true
  pull_policy: always
  privileged: false

services:
  api.web.api:
    <<: *security # secure
    container_name: backend-template
    build:
      context: backend
      dockerfile: Dockerfile
      target: ${BACKEND_TARGET}
    image: backend-template:latest
    depends_on:
      auth.web.auth:
        condition: service_healthy
        restart: true
    networks:
      frontend:
        aliases:
          - api.web.${PUBLIC_SERVER_DOMAIN}
      backend:
        aliases:
          - api.web.${PUBLIC_SERVER_DOMAIN}
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /tmp/tomcat
      - type: tmpfs
        target: /root/.m2
      - ./backend/backend-healthcheck.sh:/healthcheck.sh:ro
      # - ./docs/backend/:/docs/:rw # testcoverage
      # - ./coverage/backend/:/coverage/:rw # testcoverage
    logging: *local-logging
    healthcheck: *healthcheck

  app.web.app:
    <<: *security # secure
    container_name: frontend-template
    build:
      context: frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET}
    image: frontend-template:latest
    networks:
      frontend:
        aliases:
          - app.web.${PUBLIC_SERVER_DOMAIN}
    env_file: '.env'
    volumes:
      # - type: tmpfs # dev
      #   target: /tmp # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      # - type: tmpfs # dev
      #   target: /app/node_modules/.cache # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      # - ./frontend/src/:/app/src:ro # dev
      # - ./frontend/public/:/app/public:ro # dev
      # - ./coverage/frontend/:/app/coverage/:rw # testcoverage
      - ./frontend/frontend-healthcheck.sh:/healthcheck.sh:ro
    logging: *local-logging
    healthcheck: *healthcheck

  auth.web.auth:
    <<: *security # secure
    container_name: auth
    build:
      context: auth
      dockerfile: Dockerfile
      target: ${AUTH_TARGET}
      args:
        KC_DB_ARG: ${KC_DB}
        #KC_DB_DRIVER_ARG: ${KC_DB_DRIVER}
        #KC_TRANSACTION_XA_ENABLED_ARG: ${KC_TRANSACTION_XA_ENABLED}
        #KC_FEATURES_ARG: ${KC_FEATURES}
        #KC_FEATURES_DISABLED_ARG: ${KC_FEATURES_DISABLED}
        #KC_HTTP_RELATIVE_PATH_ARG: ${KC_HTTP_RELATIVE_PATH}
        #KC_HTTPS_CLIENT_AUTH_ARG: ${KC_HTTPS_CLIENT_AUTH}
        KC_HEALTH_ENABLED_ARG: ${KC_HEALTH_ENABLED}
        #KC_HTTP_MANAGEMENT_RELATIVE_PATH_ARG: ${KC_HTTP_MANAGEMENT_RELATIVE_PATH
        #KC_HTTPS_MANAGEMENT_CLIENT_AUTH_ARG: ${KC_HTTPS_MANAGEMENT_CLIENT_AUTH}
        KC_METRICS_ENABLED_ARG: ${KC_METRICS_ENABLED}
        #KC_VAULT_ARG: ${KC_VAULT}
        #KC_TRACING_ENABLED_ARG: ${KC_TRACING_ENABLED}
        #KC_TRACING_JDBC_ENABLED_ARG: ${KC_TRACING_JDBC_ENABLED}
        #KC_TRACING_SAMPLER_TYPE_ARG: ${KC_TRACING_SAMPLER_TYPE}
        #KC_EVENT_METRICS_USER_ENABLED_ARG: ${KC_EVENT_METRICS_USER_ENABLED}
        # KC_FIPS_MODE_ARG: ${KC_FIPS_MODE}
    image: auth:latest
    depends_on:
      authdb:
        condition: service_healthy
        restart: true
    networks:
      frontend:
        aliases:
          - auth.web.${PUBLIC_SERVER_DOMAIN}
      backend:
        aliases:
          - auth.web.${PUBLIC_SERVER_DOMAIN}
    env_file: '.env'
    command:
      - start-dev
      - --import-realm
      - --optimized
    volumes:
      - type: tmpfs
        target: /tmp/vertx-cache
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /tmp/uploads
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /opt/keycloak/data/transaction-logs/ShadowNoFileLockStore/defaultStore/
        tmpfs:
          size: 10m
      - ./auth/auth-healthcheck.sh:/healthcheck.sh:ro
      - ./auth/realms/:/opt/keycloak/data/import:ro
    logging: *local-logging
    healthcheck: *healthcheck

  authdb:
    <<: *security # secure
    container_name: authdb
    build:
      context: authdb
      dockerfile: Dockerfile
      target: ${AUTHDB_TARGET}
    image: authdb:latest
    networks:
      - backend
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /run/postgresql/
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /tmp/
        tmpfs:
          size: 10m
      - authdb-data:/var/lib/postgresql/data:rw
      - ./authdb/authdb-healthcheck.sh:/healthcheck.sh:ro
    logging: *local-logging
    healthcheck: *healthcheck

  proxy:
    <<: *security # secure
    container_name: proxy
    build:
      context: proxy
      dockerfile: Dockerfile
      target: ${PROXY_TARGET}
    image: proxy:latest
    ports:
      - ${NGINX_HTTP_PORT}:8080
      - ${NGINX_HTTPS_PORT}:8443
    networks:
      frontend:
        aliases:
          - proxy.web.${PUBLIC_SERVER_DOMAIN}
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /etc/nginx/conf.d
        tmpfs:
          size: 10m
          mode: 01777
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      - ./proxy/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./proxy/conf.d/templates/${PUBLIC_SERVER_PROTOCOL}:/etc/nginx/templates/generated:ro
      - ./proxy/proxy-healthcheck.sh:/healthcheck.sh:ro
      - /${PROJECT_NAME}/certbot/www/:/var/www/certbot/:ro
    logging: *local-logging
    healthcheck: *healthcheck

  certbot:
    <<: *security # secure
    container_name: certbot
    build:
      context: certbot
      dockerfile: Dockerfile
      target: ${CERTBOT_TARGET}
    image: certbot:latest
    networks:
      - backend
    env_file: '.env'
    command: >-
      certonly --reinstall --webroot --webroot-path=/var/www/certbot
      --email ${EMAIL} --agree-tos --no-eff-email --dry-run
      -d ${DOMAIN}
    volumes:
      - type: tmpfs
        target: /tmp
      - /${PROJECT_NAME}/certbot/www/:/var/www/certbot/:rw
      - /${PROJECT_NAME}/certbot/letencrypt:/etc/letsencrypt/:rw
      - /${PROJECT_NAME}/certbot/logs:/var/log/letsencrypt:rw
      - ./certbot/certbot-healthcheck.sh:/healthcheck.sh:ro
    logging: *local-logging
    healthcheck: *healthcheck

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  authdb-data:
