version: '3.8'

x-logging: &local-logging
  driver: 'local'
  options:
    max-size: '20m'
    max-file: '50'
x-loki-logging: &loki-logging
  driver: 'loki'
  options:
    max-size: '20m'
    max-file: '50'
    loki-url: '${LOKI_URL}'
    loki-external-labels: 'container_name={{.Name}},hostname=${LOKI_REPORTING_NAME}'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}[T ]?\d{2}:\d{2}:\d{2}.\d{3}'

x-healthcheck: &healthcheck
  test: /healthcheck.sh
  interval: 60s
  retries: 5
  start_period: 20s
  timeout: 10s

x-security: &security
  security_opt:
    - 'no-new-privileges=true'
  cap_drop:
    - ALL
  read_only: true
  pull_policy: always
  privileged: false

services:
  api.web.api:
    <<: *security # secure
    container_name: template-backend
    build:
      context: backend
      dockerfile: Dockerfile
      target: ${BACKEND_TARGET}
    image: template-backend:latest
    networks:
      - frontend
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /tmp/tomcat
      - type: tmpfs
        target: /root/.m2
      - ./backend/backend-healthcheck.sh:/healthcheck.sh:ro
      # - ./docs/backend/:/docs/:rw # testcoverage
      # - ./coverage/backend/:/coverage/:rw # testcoverage
    logging: *local-logging
    healthcheck: *healthcheck

  app.web.app:
    <<: *security # secure
    container_name: template-frontend
    build:
      context: frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET}
    image: template-frontend:latest
    networks:
      - frontend
    env_file: '.env'
    volumes:
      # - type: tmpfs # dev
      #   target: /tmp # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      # - type: tmpfs # dev
      #   target: /app/node_modules/.cache # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      # - ./frontend/src/:/app/src:ro # dev
      # - ./frontend/public/:/app/public:ro # dev
      # - ./coverage/frontend/:/app/coverage/:rw # testcoverage
      - ./frontend/frontend-healthcheck.sh:/healthcheck.sh:ro
    logging: *local-logging
    healthcheck: *healthcheck

  proxy:
    <<: *security # secure
    container_name: proxy
    build:
      context: proxy
      dockerfile: Dockerfile
      target: ${PROXY_TARGET}
    image: proxy:latest
    ports:
      - ${NGINX_HTTP_PORT}:8080
      - ${NGINX_HTTPS_PORT}:8443
    networks:
      - frontend
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /etc/nginx/conf.d
        tmpfs:
          size: 10m
          mode: 01777
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      - ./proxy/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./proxy/conf.d/templates/${PUBLIC_SERVER_PROTOCOL}:/etc/nginx/templates/generated:ro
      - ./proxy/proxy-healthcheck.sh:/healthcheck.sh:ro
      - /template-project/certbot/www/:/var/www/certbot/:ro
    logging: *local-logging
    healthcheck: *healthcheck

  certbot:
    <<: *security # secure
    container_name: certbot
    build:
      context: certbot
      dockerfile: Dockerfile
      target: ${CERTBOT_TARGET}
    image: certbot:latest
    networks:
      - backend
    env_file: '.env'
    command: >-
      certonly --reinstall --webroot --webroot-path=/var/www/certbot
      --email ${EMAIL} --agree-tos --no-eff-email --dry-run
      -d ${DOMAIN}
    volumes:
      - type: tmpfs
        target: /tmp
      - /template-project/certbot/www/:/var/www/certbot/:rw
      - /template-project/certbot/letencrypt:/etc/letsencrypt/:rw
      - /template-project/certbot/logs:/var/log/letsencrypt:rw
      - ./certbot/certbot-healthcheck.sh:/healthcheck.sh:ro
    logging: *local-logging
    healthcheck: *healthcheck

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
